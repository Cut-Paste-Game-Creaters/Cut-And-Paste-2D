using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using System.Text.RegularExpressions;

public class RankJudgeAndUpdateFunction : MonoBehaviour
{
    private StageManager stageMgr;
    ClearFunction clearFunc;
    private RankDisplay rankDisplay;
    public string rankText = "F";
    bool hasJudged = false;

    //private int allCost = 24; //繝・せ繝育畑螟画焚・育ｷ乗ｶ郁ｲｻ繧ｳ繧ｹ繝・
    private int[,] stageRank = {{100, 500, 1000, 2000}, //stage1縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {0, 100, 300, 1000}, //stage2縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {0, 150, 400, 1200}, //stage3縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {50, 200, 500, 1200}, //stage4縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {-50, 100, 300, 1000}, //stage5縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {-80, 50, 250, 700}, //stage6縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {40, 200, 500, 1000}, //stage7縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {0, 100, 300, 700}, //stage8縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {25, 50, 75, 100}, //stage9縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {25, 50, 75, 100}, //stage10縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､
                                {25, 50, 75, 100}, //stage10縺ｮ繝ｩ繝ｳ繧ｯ蝓ｺ貅匁焚蛟､

                                }; //S~F縺ｮ蛻､螳壼渕貅・

    //private int allCost = 24; //繝・せ繝育畑螟画焚・育ｷ乗ｶ郁ｲｻ繧ｳ繧ｹ繝・
    private int[] clearAddCost = { 100, 50, 30, 20, 5 }; //S・曦縺ｧStageSelect縺ｮ蛻晄悄繧ｳ繧ｹ繝医↓霑ｽ蜉縺吶ｋ繧ｳ繧ｹ繝・
                                                         //蜷・せ繝・・繧ｸ縺ｧ蠅励∴繧九さ繧ｹ繝医・蜷後§

    private int[] minConsumpCost = { -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000 }; //繧ｹ繝・・繧ｸ譛菴取ｶ郁ｲｻ繧ｳ繧ｹ繝磯・蛻・

    public Dictionary<string, int> stageNumber = new Dictionary<string, int>() // Dictionary繧ｯ繝ｩ繧ｹ縺ｮ螳｣險縺ｨ蛻晄悄蛟､縺ｮ險ｭ螳・
    {
        {"Stage1", 0},
        {"Stage2", 1},
        {"Stage3", 2},
        {"Stage4", 3},
        {"Stage5", 4},
        {"Stage6", 5},
        {"Stage7", 6},
        {"Stage8", 7},
        {"Stage9", 8},
        {"Stage10", 9},
        {"StageTemplate",10 }
    };


    // Start is called before the first frame update
    void Start()
    {
        InitStatus();
    }

    public void InitStatus()
    {
        stageMgr = null;
        clearFunc = null;
        rankDisplay = null;
        hasJudged = false;
    }

    // Update is called once per frame
    void Update()
    {
        if (stageMgr == null)
        {
            stageMgr = FindObjectOfType<StageManager>();
        }
        if (rankDisplay == null)
        {
            rankDisplay = FindObjectOfType<RankDisplay>();
        }
        //繧ｴ繝ｼ繝ｫ縺励◆繧・
        if (clearFunc != null)
        {
            if ((clearFunc.GetisClear() && !hasJudged))
            {
                JudgeAndUpdateRank(stageMgr.all_sum_cos - stageMgr.player_HP, true);
                //stageMgr.all_sum_cos = 0;
                rankDisplay.SetText(rankText);
                rankDisplay.InitTextSize();
            }
            if (clearFunc.GetisClear() && hasJudged)
            {
                rankDisplay.AnimateText();
            }
        }
        else
        {
            clearFunc = FindObjectOfType<ClearFunction>();
        }
    }

    /*譛菴取ｶ郁ｲｻ繧ｳ繧ｹ繝医ｒ譖ｴ譁ｰ*/
    /*public void UpdateMinConCost(int num)
    {
        int stage_num = stageNumber[SceneManager.GetActiveScene().name];
        if(num < minConsumpCost[stage_num]) //莉翫∪縺ｧ縺ｮ譛菴取ｶ郁ｲｻ繧ｳ繧ｹ繝医ｈ繧雁ｰ上＆縺代ｌ縺ｰ
        {
            minConsumpCost[stage_num] = num; //譛菴取ｶ郁ｲｻ繧ｳ繧ｹ繝医ｒ譖ｸ縺肴鋤縺・
        }
    }*/

    /*迴ｾ蝨ｨ縺ｮ邱乗ｶ郁ｲｻ繧ｳ繧ｹ繝医°繧画ｬ｡縺ｮ繝ｩ繝ｳ繧ｯ縺ｫ荳九′繧九∪縺ｧ縺ｮ繧ｳ繧ｹ繝医ｒ險育ｮ励☆繧矩未謨ｰ*/
    public int culcCostToNextRank()
    {
        int nowCost = 0;
        if (stageMgr != null)
        {
            nowCost = stageMgr.all_sum_cos - stageMgr.player_HP; //邱乗ｶ郁ｲｻ繧ｳ繧ｹ繝・
        }
        int stage_num = 0;          //繧ｹ繝・・繧ｸ繝翫Φ繝舌・縺ｯ0縺ｧ蛻晄悄蛹悶ゅｂ縺励ョ繝舌ャ繧ｰ逕ｨ繧ｹ繝・・繧ｸ縺縺｣縺溘ｉstage1縺ｮ繧ｳ繧ｹ繝医ｒ豬∫畑
        if (Regex.IsMatch(SceneManager.GetActiveScene().name, @"^Stage\d+$")) //繧ｷ繝ｼ繝ｳ蜷阪′Stage縺ｪ繧薙→縺九↑繧・
        {
            stage_num = stageNumber[SceneManager.GetActiveScene().name];
        }

        //繧ゅ＠F莉･荳頑ｶ郁ｲｻ縺励※縺溘ｉ0繧定ｿ斐☆縲√◎縺・〒縺ｪ縺代ｌ縺ｰ險育ｮ・
        if (nowCost < stageRank[stage_num, 3])
        {
            for (int i = 0; i < stageRank.GetLength(0); i++)
            {
                if (nowCost < stageRank[stage_num, i]) return stageRank[stage_num, i] - nowCost;
            }
        }

        return 0;
    }

    /*縺ｻ縺九・繧ｹ繧ｯ繝ｪ繝励ヨ縺九ｉ蜷・せ繝・・繧ｸ縺ｮ繝ｩ繝ｳ繧ｯ繧貞叙蠕励☆繧矩未謨ｰ*/
    public string GetStageRank(string stageName)
    {
        //繧ｹ繝・・繧ｸ蜷阪°繧画焚蟄励ｒ蜿門ｾ・
        if (stageNumber.TryGetValue(stageName, out int stageNum))
        {
            int minCost = minConsumpCost[stageNum];
            //譛蟆上せ繧ｳ繧｢縺後↑縺・↑繧丑ONE
            if (minCost == -10000)
            {
                return "NONE";
            }
            //蜷・せ繧ｳ繧｢縺九ｉ繝ｩ繝ｳ繧ｯ繧定ｿ斐☆
            if (minCost < stageRank[stageNum, 0])
            {
                return "S";
            }
            else if (minCost < stageRank[stageNum, 1])
            {
                return "A";
            }
            else if (minCost < stageRank[stageNum, 2])
            {
                return "B";
            }
            else if (minCost < stageRank[stageNum, 3])
            {
                return "C";
            }
            else if (minCost >= stageRank[stageNum, 3])
            {
                return "F";
            }
        }
        else     //繧ｹ繝・・繧ｸ蜷阪°繧牙叙蠕励〒縺阪↑縺九▲縺溘ｉ
        {
            return "NONE";
        }

        return "NONE";
    }

    /*邱乗ｶ郁ｲｻ繧ｳ繧ｹ繝医・繝ｩ繝ｳ繧ｯ蛻､螳壹→譛菴取ｶ郁ｲｻ繧ｳ繧ｹ繝医・譖ｸ縺肴鋤縺医ｒ縺翫％縺ｪ縺・未謨ｰ*/
    public string JudgeAndUpdateRank(int num, bool isCleared) //num == 邱乗ｶ郁ｲｻ繧ｳ繧ｹ繝・
    {
        string input = SceneManager.GetActiveScene().name;
        if (Regex.IsMatch(input, @"^Stage\d+$")) //繧ｷ繝ｼ繝ｳ蜷阪′Stage縺ｪ繧薙→縺九↑繧・
        {
            int stage_num = stageNumber[SceneManager.GetActiveScene().name];
            if (num < stageRank[stage_num, 0])
            {
                rankText = "S";
            }
            else if (num < stageRank[stage_num, 1])
            {
                rankText = "A";
            }
            else if (num < stageRank[stage_num, 2])
            {
                rankText = "B";
            }
            else if (num < stageRank[stage_num, 3])
            {
                rankText = "C";
            }
            else if (num >= stageRank[stage_num, 3])
            {
                rankText = "F";
            }

            //縺ｾ縺譖ｸ縺肴鋤縺医＆繧後※縺・↑縺・minConsumpCost[stage_num] == -1) 縺ｾ縺溘・ 莉翫∪縺ｧ縺ｮ譛菴取ｶ郁ｲｻ繧ｳ繧ｹ繝医ｈ繧雁ｰ上＆縺代ｌ縺ｰ
            if (isCleared && (minConsumpCost[stage_num] == -10000 || num < minConsumpCost[stage_num]))
            {
                minConsumpCost[stage_num] = num; //譛菴取ｶ郁ｲｻ繧ｳ繧ｹ繝医ｒ譖ｸ縺肴鋤縺・
                //StageSelect縺ｮ蛻晄悄繧ｳ繧ｹ繝医ｒ譖ｴ譁ｰ縺吶ｋ
                AddInitCost(stage_num);
                Debug.Log("繧ｹ繝・・繧ｸ" + (stage_num + 1) + "縺ｮ譛菴取ｶ郁ｲｻ繧ｳ繧ｹ繝医′" + num + "縺ｫ譖ｴ譁ｰ縺輔ｌ縺ｾ縺励◆");
            }
        }
        else
        {
            //繝・ヰ繝・げ逕ｨ繧ｹ繝・・繧ｸ縺ｮ蝣ｴ蜷医∵怙蟆乗ｶ郁ｲｻ繧ｳ繧ｹ繝医・譖ｴ譁ｰ縺輔ｌ縺ｪ縺・
            //Debug.Log("謨ｰ蟄励・繧ｹ繝・・繧ｸ縺ｧ縺ｯ縺ゅｊ縺ｾ縺帙ｓ縲ゅョ繝舌ャ繧ｰ逕ｨ繧ｹ繝・・繧ｸ縺ｧ縺吶・);
            int stage_num = 0;
            if (num < stageRank[stage_num, 0])
            {
                rankText = "S";
            }
            else if (num < stageRank[stage_num, 1])
            {
                rankText = "A";
            }
            else if (num < stageRank[stage_num, 2])
            {
                rankText = "B";
            }
            else if (num < stageRank[stage_num, 3])
            {
                rankText = "C";
            }
            else if (num >= stageRank[stage_num, 3])
            {
                rankText = "F";
            }

        }

        if (isCleared) hasJudged = true;
        return rankText;
    }

    public void AddInitCost(int stage_num)
    {
        switch (rankText)
        {
            case "S":
                stageMgr.initAddCost_EachStage[stage_num] = clearAddCost[0];
                break;
            case "A":
                stageMgr.initAddCost_EachStage[stage_num] = clearAddCost[1];
                break;
            case "B":
                stageMgr.initAddCost_EachStage[stage_num] = clearAddCost[2];
                break;
            case "C":
                stageMgr.initAddCost_EachStage[stage_num] = clearAddCost[3];
                break;
            default:
                break;
        }
    }
}
